# ---------------------------------------------------
# Ã‰tape 1 : Installer les dÃ©pendances de production
# ---------------------------------------------------
FROM node:18-alpine AS deps

# DÃ©finir le rÃ©pertoire de travail
WORKDIR /app

# Copier uniquement les fichiers nÃ©cessaires pour l'installation
COPY package.json yarn.lock ./

# Installer uniquement les dÃ©pendances de production
RUN yarn install --frozen-lockfile --production


# ---------------------------------------------------
# Ã‰tape 2 : Ã‰tape de test avec toutes les dÃ©pendances
# ---------------------------------------------------
FROM node:18-alpine AS test

WORKDIR /app

# Copier tous les fichiers sources de lâ€™application
COPY . .

# Installer toutes les dÃ©pendances (prod + dev)
RUN yarn install --frozen-lockfile

# Fichier .env spÃ©cifique pour les tests (SQLite par dÃ©faut ici)
COPY .env.test .env

# Argument pour choisir quels tests exÃ©cuter
# Valeurs possibles :
#   TEST_SCOPE=all         -> unitaires + intÃ©gration SQLite
#   TEST_SCOPE=integration -> uniquement intÃ©gration SQLite
#   TEST_SCOPE=fail        -> uniquement test KO
ARG TEST_SCOPE=all
ENV NODE_ENV=test
ENV LOG_LEVEL=debug
# ExÃ©cution conditionnelle des tests
ARG TEST_RUN_TAG=none  # ðŸ‘ˆ ceci sert Ã  invalider le cache
# Afficher les tests disponibles
RUN yarn test:unit:build --listTests --silent=false --colors --detectOpenHandles

# ExÃ©cuter les bons tests en fonction de TEST_SCOPE
RUN echo "ðŸ§ª Test run tag: $TEST_RUN_TAG" && \
    if [ "$TEST_SCOPE" = "integration" ]; then \
      yarn --verbose --silent=false --colors --detectOpenHandles test:integration:test ; \
    elif [ "$TEST_SCOPE" = "fail" ]; then \
      yarn --verbose --silent=false --colors --detectOpenHandles test:unit:fail ; \
    else \
      yarn test:unit:build --verbose --silent=false --colors --detectOpenHandles && \
      yarn test:integration:test --verbose --silent=false --colors --detectOpenHandles; \
    fi


# ---------------------------------------------------
# Ã‰tape 3 : Image finale prÃªte Ã  lâ€™emploi (sans dev deps)
# ---------------------------------------------------
FROM node:18-alpine AS final

WORKDIR /app

# Copier uniquement les sources validÃ©es depuis le stage test
COPY --from=test /app/src ./src
COPY --from=test /app/static ./static
COPY --from=test /app/.env.production .env

# Copier uniquement les modules prod
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package.json ./package.json
COPY --from=deps /app/yarn.lock ./yarn.lock

# DÃ©finir les variables d'environnement de production
ENV NODE_ENV=production
ENV LOG_LEVEL=info

# Ajouter un LABEL pour la traÃ§abilitÃ© de lâ€™image
LABEL maintainer="Elies Jebri <e.ji@mail.com>" \
      org.opencontainers.image.source="https://github.com/eliesjebri/simple-todo" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.description="Image finale simple-todo validÃ©e aprÃ¨s tests"

EXPOSE 3000

CMD ["node", "src/index.js"]
